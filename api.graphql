### This file was generated by Nexus Schema
### Do not make changes to this file directly


"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the
`date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO
8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type DrinkingLocations {
  """Time when the user started drinking"""
  createdAt: DateTime

  """Id of the Drinking location"""
  id: String

  """Latitude of the Drinking Location"""
  latitude: Float

  """Name of the Drinking Location"""
  locationName: String

  """Longtitude of the Drinking """
  longtitude: Float
  user: User

  """Foreign key to User"""
  userId: String
}

input DrinkingLocationsCreateInput {
  createdAt: DateTime
  id: String
  latitude: Float!
  locationName: String!
  longtitude: Float!
  user: UserCreateOneWithoutDrinkingLocationInput!
}

input DrinkingLocationsCreateOneWithoutUserInput {
  connect: DrinkingLocationsWhereUniqueInput
  create: DrinkingLocationsCreateWithoutUserInput
}

input DrinkingLocationsCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  latitude: Float!
  locationName: String!
  longtitude: Float!
}

input DrinkingLocationsWhereUniqueInput {
  id: String
}

"""
The `JSON` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json

type Mutation {
  createOneDrinkingLocations(data: DrinkingLocationsCreateInput!): DrinkingLocations!
  createOneProfile(data: ProfileCreateInput!): Profile!
  createOneUser(data: UserCreateInput!): User!
}

type Profile {
  """Id of the User Profile"""
  id: String

  """IMG64 string for Profile Image"""
  image: String
  user: User
}

input ProfileCreateInput {
  id: String
  image: String!
  user: UserCreateOneWithoutProfileInput!
}

input ProfileCreateOneWithoutUserInput {
  connect: ProfileWhereUniqueInput
  create: ProfileCreateWithoutUserInput
}

input ProfileCreateWithoutUserInput {
  id: String
  image: String!
}

input ProfileWhereUniqueInput {
  id: String
}

type Query {
  user(where: UserWhereUniqueInput!): User
  users(after: UserWhereUniqueInput, before: UserWhereUniqueInput, first: Int, last: Int): [User!]!
}

type User {
  DrinkingLocations: DrinkingLocations

  """Id of the user"""
  id: String

  """Encrypted password"""
  password: String
  Profile: Profile

  """Name of the user"""
  username: String
}

input UserCreateInput {
  drinkingLocation: DrinkingLocationsCreateOneWithoutUserInput
  id: String
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  username: String!
}

input UserCreateOneWithoutDrinkingLocationInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutDrinkingLocationInput
}

input UserCreateOneWithoutProfileInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutProfileInput
}

input UserCreateWithoutDrinkingLocationInput {
  id: String
  password: String!
  profile: ProfileCreateOneWithoutUserInput
  username: String!
}

input UserCreateWithoutProfileInput {
  drinkingLocation: DrinkingLocationsCreateOneWithoutUserInput
  id: String
  password: String!
  username: String!
}

input UserWhereUniqueInput {
  id: String
}
